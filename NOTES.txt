=== testing Game - unit vs. integration ===
TESTING PLAYERS
for human player Player class is the most external in the system - the
outermost interface that should be integration-tested from (for now)

for AI player, there's no outer interface - Player and Game are two equal
collaborating objects
- either the game behavior is tested by simulating the player or the player
  is tested by asking for moves

- the same goes for testing the human players' UI

=> players and games can never be completely integration-tested together
=> test the game behavior by simulating the player (use real instance or
   mock?)
=> test the players (AI or UI) separately by asking for moves

TESTING JUDGES
- for testing Game behavior the judge can be either simulated or some
  particular Judge can be used (test depends on its behavior)
=> for now simulate and test the Judges in isolation

TESTING BOARD MANIPULATION
- needs much setup
- what would integration testing of this bring?
- wouldn't it be just copying of unit tests into more, unimportant context?
- what would the integration test look like?
  - simulated player chooses move and is either informed about game outcome,
    bad move or the other player is asked for move with updated board
  - but validity of the move or outcome of the game is determined by the
    judge, which is also simulated (and tested in isolation)
    -> board state doesn't matter
=> test in isolation

==> make this a unit test, integration test doesn't make much sense for now
a) use doubles
- using stubs for collaborators is tedious, since we need to stub all
  methods that are called in the process (or fragile if null objects used)
b) use real instances
- unstubed real player's methods may have unexpected/unfeasible side effects
- may be slow (board)
c) use test fakes
- can be linted by same tests as all implementing classes
- controlled - no unwanted side-effects
- several predefined behaviors

=> use double for board
- only update! called, no variability needed -> fake is overkill, fast
=> use fakes for players
- hard to stub all behavior, lints, several predefined behaviors
=> use fake judges
- several predefined behaviors
